#ifndef DATADEFINE_H
#define DATADEFINE_H
#include<qglobal.h>


#define uchar unsigned char

//quint8 sentCmd[2][4] ={
//    {0x04,  0x04,  0x01,  0x04},
//    {0x05,  0x06,  0x01,  0x04}
//};

//quint8 recalibrateCmd[16]={0x7B , 0xA0 , 0x10 , 00 , 00 , 00 , 00 , 00 , 00 , 00 , 00 , 00 , 00 , 00 , 00 , 0xCB};
//校准模式选择
quint8 recalibrateCmd[4][16]={
    {0x7B , 0xA6 , 0x01 , 0x10, 0x01 , 0x00 , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xCD},
    {0x7B , 0xA6 , 0x02 , 0x10, 0x01 , 0x00 , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xCE},
    {0x7B , 0xA6 , 0x03 , 0x10, 0x01 , 0x00 , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xCF},
    {0x7B , 0xA6 , 0x04 , 0x10, 0x01 , 0x00 , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC8},
    };
//激活校准
quint8 activationCmd[16]={0x7B, 0xA0, 0x10,  0x00,
                          0x00, 0x00,  0x00, 0x00,
                          0x00,  0x00, 0x00, 0x00,
                          0x00, 0x00, 0x00, 0xCB};


//quint8 recalibrateBack[7]={0xA0 ,0x10 ,0xAA ,0xAA ,0xAA ,0xBB ,0xA1};

 quint8 recvCmd[2][5] ={
    {0x04,  0xCC,  0xCC,  0xCC,  0xBB}, //增益应答Ok
    {0x05,  0xDD,  0xDD,  0xDD, 0xBB}   //相位应答Ok
};

quint8 transCmd[4][6]={ //增益
    {0x01,  0x04,  0x04,  0x01,  0x04,  0x04 },
    {0x02,  0x04,  0x04,  0x01,  0x04,  0x07 },
    {0x03,  0x04,  0x04,  0x01,  0x04,  0x06 },
    {0x04 , 0x04,  0x04,  0x01,  0x04,  0x01 }
};

//quint8 phaseCmd[4][6]={ //相位
//    {0x01,  0x05,  0x06,  0x01,  0x04,  0x07 },
//    {0x02,  0x05,  0x06,  0x01,  0x04,  0x04 },
//    {0x03,  0x05,  0x06,  0x01,  0x04,  0x05 },
//    {0x04,  0x05,  0x06,  0x01,  0x04,  0x02 }
//};

quint8 modelCmd1[4][16]={ //一键模式
    {0x7B, 0xA6, 0x01, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xCC},
    {0x7B, 0xA6, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xCF},
    {0x7B, 0xA6, 0x03, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xCE},
    {0x7B, 0xA6, 0x04, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC9}
};

quint8 modelCmd2[4][16]={ //继电器轮流开关模式
    {0x7B, 0xA6, 0x01, 0x10, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xCD},
    {0x7B, 0xA6, 0x02, 0x10, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xCE},
    {0x7B, 0xA6, 0x03, 0x10, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xCF},
    {0x7B, 0xA6, 0x04, 0x10, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC8}
};

typedef struct responedData{
    quint8 addr;    //地址码
    quint8 cmd[5];  //发送命令
    quint8 xornumber;   //校验码
}recvdata;

typedef struct responseCollected{
    quint8 head[2]; //头码
    quint8 addr;    //地址位
    quint8 funcode[2];  //功能码
    quint8 openeffective[6];   //开启有效
    quint8 closeffective[6];   //关闭有效
    quint8 clearEle[6];        //清电能
    quint8 obligate[61];        //预留 61位只取一个字节
    quint8 swstate;            //00表示不是全关全开 01表示全关全开
    quint8 opbit[3];       //三块执行板各个输出位个数
    quint8 length;             //长度
    quint8 xornumber;          //校验码
}collectedData;

typedef struct returntableData{
   quint8 head[2];          //头码
   quint8 addr;            //执行板地址
   quint8 opnum;           //输出位个数
   quint8 conversefreq;    //交变频率
   quint8 vol[2][2];          //两个回路的电压
   quint8 onoffState[2];      //十四位开关状态
   quint8 current[14][2];   //电流，第一位到第十四位，每位两个字节

   quint8 powerfactor[14];//功率因素，第一个和第十四个
   double power[14];   //功率，第一位到第十四位
   quint8 ele[14][3];     //电能，第一位到第十四位，每位三个字节
   quint8 version;        //版本号
   quint8 len;         //长度
   quint8 xornumber;       //校验码
}returndata;

recvdata recv;//应答
#endif // DATADEFINE_H
